// WARNING:
// This file was generated by the Microsoft DataWarehouse String Resource Tool 1.37.0.0
// from information in sr.strings
// DO NOT MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.SqlTools.ResourceProvider.Core
{
    using System;
    using System.Reflection;
    using System.Resources;
    using System.Globalization;

    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SR
    {
        protected SR()
        { }

        public static CultureInfo Culture
        {
            get
            {
                return Keys.Culture;
            }
            set
            {
                Keys.Culture = value;
            }
        }


        public static string AdoDotNetConnectionProperties_NoProperties
        {
            get
            {
                return Keys.GetString(Keys.AdoDotNetConnectionProperties_NoProperties);
            }
        }

        public static string AuthenticationFailedErrorMessage
        {
            get
            {
                return Keys.GetString(Keys.AuthenticationFailedErrorMessage);
            }
        }

        public static string AzureServerNotFound
        {
            get
            {
                return Keys.GetString(Keys.AzureServerNotFound);
            }
        }

        public static string AzureSubscriptionFailedErrorMessage
        {
            get
            {
                return Keys.GetString(Keys.AzureSubscriptionFailedErrorMessage);
            }
        }

        public static string DatabaseDiscoveryFailedErrorMessage
        {
            get
            {
                return Keys.GetString(Keys.DatabaseDiscoveryFailedErrorMessage);
            }
        }

        public static string ErrUnexpectedConnectionType
        {
            get
            {
                return Keys.GetString(Keys.ErrUnexpectedConnectionType);
            }
        }

        public static string FirewallRuleAccessForbidden
        {
            get
            {
                return Keys.GetString(Keys.FirewallRuleAccessForbidden);
            }
        }

        public static string FirewallRuleCreationFailed
        {
            get
            {
                return Keys.GetString(Keys.FirewallRuleCreationFailed);
            }
        }

        public static string InvalidIpAddress
        {
            get
            {
                return Keys.GetString(Keys.InvalidIpAddress);
            }
        }

        public static string InvalidServerTypeErrorMessage
        {
            get
            {
                return Keys.GetString(Keys.InvalidServerTypeErrorMessage);
            }
        }

        public static string LoadingExportableFailedGeneralErrorMessage
        {
            get
            {
                return Keys.GetString(Keys.LoadingExportableFailedGeneralErrorMessage);
            }
        }

        public static string NoInternetConnectionError
        {
            get
            {
                return Keys.GetString(Keys.NoInternetConnectionError);
            }
        }

        public static string ServerDiscoveryFailedErrorMessage
        {
            get
            {
                return Keys.GetString(Keys.ServerDiscoveryFailedErrorMessage);
            }
        }

        public static string SqlConnectionProperties_CannotTestNonExistentDatabase
        {
            get
            {
                return Keys.GetString(Keys.SqlConnectionProperties_CannotTestNonExistentDatabase);
            }
        }

        public static string SqlConnectionProperties_MustSpecifyDataSource
        {
            get
            {
                return Keys.GetString(Keys.SqlConnectionProperties_MustSpecifyDataSource);
            }
        }

        public static string SqlConnectionProperties_UnsupportedSqlVersion
        {
            get
            {
                return Keys.GetString(Keys.SqlConnectionProperties_UnsupportedSqlVersion);
            }
        }

        public static string SqlFileConnectionProperties_CannotTestNonExistentMdf
        {
            get
            {
                return Keys.GetString(Keys.SqlFileConnectionProperties_CannotTestNonExistentMdf);
            }
        }

        public static string SqlFileConnectionProperties_NoFileSpecified
        {
            get
            {
                return Keys.GetString(Keys.SqlFileConnectionProperties_NoFileSpecified);
            }
        }

        public static string SqlFileConnectionProperties_TimeoutReasons
        {
            get
            {
                return Keys.GetString(Keys.SqlFileConnectionProperties_TimeoutReasons);
            }
        }

        public static string UnsupportedSqlServerVersionErrorMessage
        {
            get
            {
                return Keys.GetString(Keys.UnsupportedSqlServerVersionErrorMessage);
            }
        }

        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class Keys
        {
            static ResourceManager resourceManager = new ResourceManager("Microsoft.SqlTools.ResourceProvider.Core.Localization.SR", typeof(SR).GetTypeInfo().Assembly);

            static CultureInfo _culture = null;


            public const string AdoDotNetConnectionProperties_NoProperties = "AdoDotNetConnectionProperties_NoProperties";


            public const string AuthenticationFailedErrorMessage = "AuthenticationFailedErrorMessage";


            public const string AzureServerNotFound = "AzureServerNotFound";


            public const string AzureSubscriptionFailedErrorMessage = "AzureSubscriptionFailedErrorMessage";


            public const string DatabaseDiscoveryFailedErrorMessage = "DatabaseDiscoveryFailedErrorMessage";


            public const string ErrUnexpectedConnectionType = "ErrUnexpectedConnectionType";


            public const string FirewallRuleAccessForbidden = "FirewallRuleAccessForbidden";


            public const string FirewallRuleCreationFailed = "FirewallRuleCreationFailed";


            public const string InvalidIpAddress = "InvalidIpAddress";


            public const string InvalidServerTypeErrorMessage = "InvalidServerTypeErrorMessage";


            public const string LoadingExportableFailedGeneralErrorMessage = "LoadingExportableFailedGeneralErrorMessage";


            public const string NoInternetConnectionError = "NoInternetConnectionError";


            public const string ServerDiscoveryFailedErrorMessage = "ServerDiscoveryFailedErrorMessage";


            public const string SqlConnectionProperties_CannotTestNonExistentDatabase = "SqlConnectionProperties_CannotTestNonExistentDatabase";


            public const string SqlConnectionProperties_MustSpecifyDataSource = "SqlConnectionProperties_MustSpecifyDataSource";


            public const string SqlConnectionProperties_UnsupportedSqlVersion = "SqlConnectionProperties_UnsupportedSqlVersion";


            public const string SqlFileConnectionProperties_CannotTestNonExistentMdf = "SqlFileConnectionProperties_CannotTestNonExistentMdf";


            public const string SqlFileConnectionProperties_NoFileSpecified = "SqlFileConnectionProperties_NoFileSpecified";


            public const string SqlFileConnectionProperties_TimeoutReasons = "SqlFileConnectionProperties_TimeoutReasons";


            public const string UnsupportedSqlServerVersionErrorMessage = "UnsupportedSqlServerVersionErrorMessage";


            private Keys()
            { }

            public static CultureInfo Culture
            {
                get
                {
                    return _culture;
                }
                set
                {
                    _culture = value;
                }
            }

            public static string GetString(string key)
            {
                return resourceManager.GetString(key, _culture);
            }

        }
    }
}
