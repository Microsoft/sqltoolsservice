// This file was generated by a T4 Template. Do not modify directly, instead update the SmoQueryModelDefinition.xml file
// and re-run the T4 template. This can be done in Visual Studio by right-click in and choosing "Run Custom Tool",
// or from the command-line on any platform by running "build.cmd -Target=CodeGen" or "build.sh -Target=CodeGen".

using System;
using System.Collections.Generic;
using System.Composition;
using System.Linq;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Smo.Broker;

namespace Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel
{

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Database) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Databases;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Database>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlLinkedServerLoginQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(LinkedServer) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.LinkedServers;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<LinkedServer>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlLoginQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Login) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Logins;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Login>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerRoleQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Roles;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ServerRole>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCredentialQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Credential) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Credentials;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Credential>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCryptographicProviderQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(CryptographicProvider) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.CryptographicProviders;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<CryptographicProvider>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerAuditQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Audit) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Audits;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Audit>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerAuditSpecificationQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerAuditSpecification) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.ServerAuditSpecifications;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ServerAuditSpecification>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlEndpointQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Endpoint) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Endpoints;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Endpoint>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlLinkedServerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(LinkedServer) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.LinkedServers;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<LinkedServer>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerDdlTriggerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerDdlTrigger) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Triggers;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ServerDdlTrigger>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlErrorMessageQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedMessage) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.UserDefinedMessages;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<UserDefinedMessage>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlTableQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Table) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Tables;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Table>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlViewQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(View) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Views;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<View>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSynonymQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Synonym) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Synonyms;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Synonym>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlColumnQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Column) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            TableViewTableTypeBase parentTableViewTableTypeBase = context.Parent as TableViewTableTypeBase;
            if (parentTableViewTableTypeBase != null)
            {
                var retValue = parentTableViewTableTypeBase.Columns;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Column>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlIndexQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Index) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            TableViewTableTypeBase parentTableViewTableTypeBase = context.Parent as TableViewTableTypeBase;
            if (parentTableViewTableTypeBase != null)
            {
                var retValue = parentTableViewTableTypeBase.Indexes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Index>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCheckQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Check) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.Checks;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Check>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlForeignKeyConstraintQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ForeignKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.ForeignKeys;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ForeignKey>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDefaultConstraintQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DefaultConstraint) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Column parentColumn = context.Parent as Column;
            if (parentColumn != null)
            {
                var retValue = parentColumn.DefaultConstraint;
                if(retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDmlTriggerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Trigger) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.Triggers;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Trigger>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFullTextIndexQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextIndex) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.FullTextIndex;
                if(retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlStatisticQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Statistic) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            TableViewBase parentTableViewBase = context.Parent as TableViewBase;
            if (parentTableViewBase != null)
            {
                var retValue = parentTableViewBase.Statistics;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Statistic>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseDdlTriggerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Trigger) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Triggers;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Trigger>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlAssemblyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SqlAssembly) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Assemblies;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<SqlAssembly>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlRuleQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Rule) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Rules;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Rule>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDefaultQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Default) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Defaults;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Default>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSequenceQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Sequence) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Sequences;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Sequence>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSystemDataTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SystemDataType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.SystemDataTypes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<SystemDataType>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedDataTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedDataType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedDataTypes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<UserDefinedDataType>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedTableTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedTableType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedTableTypes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<UserDefinedTableType>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlXmlSchemaCollectionQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(XmlSchemaCollection) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.XmlSchemaCollections;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<XmlSchemaCollection>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedTypes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<UserDefinedType>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedFunctionQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedFunction) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedFunctions;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<UserDefinedFunction>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedAggregateQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedAggregate) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedAggregates;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<UserDefinedAggregate>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFileGroupQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FileGroup) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.FileGroups;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<FileGroup>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFileQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DataFile) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            FileGroup parentFileGroup = context.Parent as FileGroup;
            if (parentFileGroup != null)
            {
                var retValue = parentFileGroup.Files;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<DataFile>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFullTextCatalogQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextCatalog) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.FullTextCatalogs;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<FullTextCatalog>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFullTextStopListQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextStopList) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.FullTextStopLists;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<FullTextStopList>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlPartitionFunctionQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionFunction) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.PartitionFunctions;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<PartitionFunction>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlPartitionSchemeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionScheme) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.PartitionSchemes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<PartitionScheme>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSearchPropertyListQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SearchPropertyList) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.SearchPropertyLists;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<SearchPropertyList>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(User) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Users;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<User>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSchemaQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Schema) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Schemas;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Schema>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlAsymmetricKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(AsymmetricKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.AsymmetricKeys;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<AsymmetricKey>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCertificateQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Certificate) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Certificates;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Certificate>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSymmetricKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SymmetricKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.SymmetricKeys;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<SymmetricKey>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseEncryptionKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseEncryptionKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.DatabaseEncryptionKey;
                if(retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlMasterKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(MasterKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.MasterKey;
                if(retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseAuditSpecificationQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseAuditSpecification) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.DatabaseAuditSpecifications;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<DatabaseAuditSpecification>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSecurityPolicyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SecurityPolicy) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.SecurityPolicies;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<SecurityPolicy>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseCredentialQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseScopedCredential) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.DatabaseScopedCredentials;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<DatabaseScopedCredential>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlRoleQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Roles;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<DatabaseRole>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlApplicationRoleQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ApplicationRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ApplicationRoles;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ApplicationRole>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlColumnMasterKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ColumnMasterKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ColumnMasterKeys;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ColumnMasterKey>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlColumnEncryptionKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ColumnEncryptionKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ColumnEncryptionKeys;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ColumnEncryptionKey>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServiceBrokerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceBroker) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ServiceBroker;
                if(retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServiceQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(BrokerService) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.Services;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<BrokerService>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlContractQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceContract) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.ServiceContracts;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ServiceContract>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlQueueQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceQueue) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.Queues;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ServiceQueue>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlRemoteServiceBindingQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(RemoteServiceBinding) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.RemoteServiceBindings;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<RemoteServiceBinding>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlBrokerPriorityQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(BrokerPriority) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.Priorities;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<BrokerPriority>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlMessageTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(MessageType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.MessageTypes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<MessageType>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlExternalDataSourceQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExternalDataSource) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ExternalDataSources;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ExternalDataSource>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlExternalFileFormatQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExternalFileFormat) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ExternalFileFormats;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ExternalFileFormat>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlProcedureQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(StoredProcedure) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.StoredProcedures;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<StoredProcedure>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlExtendedStoredProcedureQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExtendedStoredProcedure) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ExtendedStoredProcedures;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<ExtendedStoredProcedure>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSubroutineParameterQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Parameter) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            StoredProcedure parentStoredProcedure = context.Parent as StoredProcedure;
            if (parentStoredProcedure != null)
            {
                var retValue = parentStoredProcedure.Parameters;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Parameter>(retValue);
                }
            }
            UserDefinedAggregate parentUserDefinedAggregate = context.Parent as UserDefinedAggregate;
            if (parentUserDefinedAggregate != null)
            {
                var retValue = parentUserDefinedAggregate.Parameters;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Parameter>(retValue);
                }
            }
            UserDefinedFunction parentUserDefinedFunction = context.Parent as UserDefinedFunction;
            if (parentUserDefinedFunction != null)
            {
                var retValue = parentUserDefinedFunction.Parameters;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<Parameter>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlPartitionFunctionParameterQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionFunctionParameter) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            PartitionFunction parentPartitionFunction = context.Parent as PartitionFunction;
            if (parentPartitionFunction != null)
            {
                var retValue = parentPartitionFunction.PartitionFunctionParameters;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<PartitionFunctionParameter>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlBuiltInTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SystemDataType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.SystemDataTypes;
                if(retValue != null)
                {
                    return new SmoCollectionWrapper<SystemDataType>(retValue);
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }
}

