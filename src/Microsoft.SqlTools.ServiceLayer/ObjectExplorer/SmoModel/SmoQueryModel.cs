// This file was generated by a T4 Template. Do not modify directly, instead update the SmoQueryModelDefinition.xml file
// and re-run the T4 template. This can be done in Visual Studio by right-click in and choosing "Run Custom Tool",
// or from the command-line on any platform by running "build.cmd -Target=CodeGen" or "build.sh -Target=CodeGen".

using System;
using System.Collections.Generic;
using System.Composition;
using System.Linq;
using Microsoft.SqlServer.Management.Common;
using Microsoft.SqlServer.Management.Sdk.Sfc;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Smo.Broker;

namespace Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel
{

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Database) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.Databases.Refresh();
                }
                var retValue = parentServer.Databases;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/Database" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Database>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Database>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlLinkedServerLoginQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(LinkedServer) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.LinkedServers.Refresh();
                }
                var retValue = parentServer.LinkedServers;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/LinkedServer" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<LinkedServer>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<LinkedServer>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlLoginQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Login) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.Logins.Refresh();
                }
                var retValue = parentServer.Logins;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/Login" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Login>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Login>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerRoleQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.Roles.Refresh();
                }
                var retValue = parentServer.Roles;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/ServerRole" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ServerRole>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ServerRole>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCredentialQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Credential) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.Credentials.Refresh();
                }
                var retValue = parentServer.Credentials;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/Credential" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Credential>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Credential>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCryptographicProviderQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(CryptographicProvider) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.CryptographicProviders.Refresh();
                }
                var retValue = parentServer.CryptographicProviders;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/CryptographicProvider" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<CryptographicProvider>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<CryptographicProvider>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerAuditQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Audit) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.Audits.Refresh();
                }
                var retValue = parentServer.Audits;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/Audit" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Audit>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Audit>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerAuditSpecificationQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerAuditSpecification) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.ServerAuditSpecifications.Refresh();
                }
                var retValue = parentServer.ServerAuditSpecifications;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/ServerAuditSpecification" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ServerAuditSpecification>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ServerAuditSpecification>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlEndpointQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Endpoint) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.Endpoints.Refresh();
                }
                var retValue = parentServer.Endpoints;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/Endpoint" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Endpoint>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Endpoint>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlLinkedServerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(LinkedServer) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.LinkedServers.Refresh();
                }
                var retValue = parentServer.LinkedServers;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/LinkedServer" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<LinkedServer>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<LinkedServer>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServerDdlTriggerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerDdlTrigger) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.Triggers.Refresh();
                }
                var retValue = parentServer.Triggers;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/ServerDdlTrigger" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ServerDdlTrigger>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ServerDdlTrigger>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlErrorMessageQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedMessage) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServer.UserDefinedMessages.Refresh();
                }
                var retValue = parentServer.UserDefinedMessages;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServer.Urn.ToString()}/UserDefinedMessage" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<UserDefinedMessage>(retValue).Where(c => PassesFinalFilters(parentServer, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<UserDefinedMessage>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlTableQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Table) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Tables.Refresh();
                }
                var retValue = parentDatabase.Tables;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/Table" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Table>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Table>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlHistoryTableQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Table) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTable.Parent.Tables.Refresh();
                }
                var retValue = parentTable.Parent.Tables;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentTable.Parent.Urn.ToString()}/Table" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Table>(retValue).Where(c => PassesFinalFilters(parentTable, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Table>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlViewQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(View) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Views.Refresh();
                }
                var retValue = parentDatabase.Views;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/View" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<View>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<View>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSynonymQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Synonym) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Synonyms.Refresh();
                }
                var retValue = parentDatabase.Synonyms;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/Synonym" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Synonym>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Synonym>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlColumnQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Column) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            TableViewTableTypeBase parentTableViewTableTypeBase = context.Parent as TableViewTableTypeBase;
            if (parentTableViewTableTypeBase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTableViewTableTypeBase.Columns.Refresh();
                }
                var retValue = parentTableViewTableTypeBase.Columns;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentTableViewTableTypeBase.Urn.ToString()}/Column" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Column>(retValue).Where(c => PassesFinalFilters(parentTableViewTableTypeBase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Column>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlIndexQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Index) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            TableViewTableTypeBase parentTableViewTableTypeBase = context.Parent as TableViewTableTypeBase;
            if (parentTableViewTableTypeBase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTableViewTableTypeBase.Indexes.Refresh();
                }
                var retValue = parentTableViewTableTypeBase.Indexes;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentTableViewTableTypeBase.Urn.ToString()}/Index" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Index>(retValue).Where(c => PassesFinalFilters(parentTableViewTableTypeBase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Index>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCheckQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Check) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTable.Checks.Refresh();
                }
                var retValue = parentTable.Checks;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentTable.Urn.ToString()}/Check" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Check>(retValue).Where(c => PassesFinalFilters(parentTable, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Check>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlForeignKeyConstraintQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ForeignKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTable.ForeignKeys.Refresh();
                }
                var retValue = parentTable.ForeignKeys;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentTable.Urn.ToString()}/ForeignKey" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ForeignKey>(retValue).Where(c => PassesFinalFilters(parentTable, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ForeignKey>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDefaultConstraintQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DefaultConstraint) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Column parentColumn = context.Parent as Column;
            if (parentColumn != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentColumn.DefaultConstraint.Refresh();
                }
                var retValue = parentColumn.DefaultConstraint;
                if (retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDmlTriggerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Trigger) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTable.Triggers.Refresh();
                }
                var retValue = parentTable.Triggers;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentTable.Urn.ToString()}/Trigger" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Trigger>(retValue).Where(c => PassesFinalFilters(parentTable, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Trigger>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFullTextIndexQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextIndex) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTable.FullTextIndex.Refresh();
                }
                var retValue = parentTable.FullTextIndex;
                if (retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlStatisticQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Statistic) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            TableViewBase parentTableViewBase = context.Parent as TableViewBase;
            if (parentTableViewBase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentTableViewBase.Statistics.Refresh();
                }
                var retValue = parentTableViewBase.Statistics;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentTableViewBase.Urn.ToString()}/Statistic" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Statistic>(retValue).Where(c => PassesFinalFilters(parentTableViewBase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Statistic>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseDdlTriggerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseDdlTrigger) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Triggers.Refresh();
                }
                var retValue = parentDatabase.Triggers;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/DatabaseDdlTrigger" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<DatabaseDdlTrigger>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<DatabaseDdlTrigger>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlAssemblyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SqlAssembly) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Assemblies.Refresh();
                }
                var retValue = parentDatabase.Assemblies;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/SqlAssembly" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<SqlAssembly>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<SqlAssembly>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSequenceQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Sequence) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Sequences.Refresh();
                }
                var retValue = parentDatabase.Sequences;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/Sequence" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Sequence>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Sequence>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedDataTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedDataType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.UserDefinedDataTypes.Refresh();
                }
                var retValue = parentDatabase.UserDefinedDataTypes;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/UserDefinedDataType" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<UserDefinedDataType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<UserDefinedDataType>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedTableTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedTableType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.UserDefinedTableTypes.Refresh();
                }
                var retValue = parentDatabase.UserDefinedTableTypes;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/UserDefinedTableType" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<UserDefinedTableType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<UserDefinedTableType>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlXmlSchemaCollectionQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(XmlSchemaCollection) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.XmlSchemaCollections.Refresh();
                }
                var retValue = parentDatabase.XmlSchemaCollections;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/XmlSchemaCollection" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<XmlSchemaCollection>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<XmlSchemaCollection>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.UserDefinedTypes.Refresh();
                }
                var retValue = parentDatabase.UserDefinedTypes;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/UserDefinedType" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<UserDefinedType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<UserDefinedType>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedFunctionQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedFunction) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.UserDefinedFunctions.Refresh();
                }
                var retValue = parentDatabase.UserDefinedFunctions;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/UserDefinedFunction" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<UserDefinedFunction>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<UserDefinedFunction>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserDefinedAggregateQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedAggregate) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.UserDefinedAggregates.Refresh();
                }
                var retValue = parentDatabase.UserDefinedAggregates;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/UserDefinedAggregate" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<UserDefinedAggregate>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<UserDefinedAggregate>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFileGroupQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FileGroup) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.FileGroups.Refresh();
                }
                var retValue = parentDatabase.FileGroups;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/FileGroup" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<FileGroup>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<FileGroup>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFileQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DataFile) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            FileGroup parentFileGroup = context.Parent as FileGroup;
            if (parentFileGroup != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentFileGroup.Files.Refresh();
                }
                var retValue = parentFileGroup.Files;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentFileGroup.Urn.ToString()}/DataFile" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<DataFile>(retValue).Where(c => PassesFinalFilters(parentFileGroup, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<DataFile>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFullTextCatalogQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextCatalog) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.FullTextCatalogs.Refresh();
                }
                var retValue = parentDatabase.FullTextCatalogs;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/FullTextCatalog" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<FullTextCatalog>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<FullTextCatalog>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlFullTextStopListQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextStopList) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.FullTextStopLists.Refresh();
                }
                var retValue = parentDatabase.FullTextStopLists;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/FullTextStopList" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<FullTextStopList>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<FullTextStopList>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlPartitionFunctionQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionFunction) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.PartitionFunctions.Refresh();
                }
                var retValue = parentDatabase.PartitionFunctions;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/PartitionFunction" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<PartitionFunction>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<PartitionFunction>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlPartitionSchemeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionScheme) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.PartitionSchemes.Refresh();
                }
                var retValue = parentDatabase.PartitionSchemes;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/PartitionScheme" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<PartitionScheme>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<PartitionScheme>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSearchPropertyListQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SearchPropertyList) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.SearchPropertyLists.Refresh();
                }
                var retValue = parentDatabase.SearchPropertyLists;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/SearchPropertyList" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<SearchPropertyList>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<SearchPropertyList>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlUserQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(User) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Users.Refresh();
                }
                var retValue = parentDatabase.Users;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/User" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<User>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<User>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSchemaQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Schema) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Schemas.Refresh();
                }
                var retValue = parentDatabase.Schemas;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/Schema" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Schema>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Schema>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlAsymmetricKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(AsymmetricKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.AsymmetricKeys.Refresh();
                }
                var retValue = parentDatabase.AsymmetricKeys;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/AsymmetricKey" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<AsymmetricKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<AsymmetricKey>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlCertificateQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Certificate) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Certificates.Refresh();
                }
                var retValue = parentDatabase.Certificates;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/Certificate" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Certificate>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Certificate>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSymmetricKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SymmetricKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.SymmetricKeys.Refresh();
                }
                var retValue = parentDatabase.SymmetricKeys;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/SymmetricKey" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<SymmetricKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<SymmetricKey>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseEncryptionKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseEncryptionKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.DatabaseEncryptionKey.Refresh();
                }
                var retValue = parentDatabase.DatabaseEncryptionKey;
                if (retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlMasterKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(MasterKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.MasterKey.Refresh();
                }
                var retValue = parentDatabase.MasterKey;
                if (retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseAuditSpecificationQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseAuditSpecification) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.DatabaseAuditSpecifications.Refresh();
                }
                var retValue = parentDatabase.DatabaseAuditSpecifications;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/DatabaseAuditSpecification" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<DatabaseAuditSpecification>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<DatabaseAuditSpecification>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSecurityPolicyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SecurityPolicy) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.SecurityPolicies.Refresh();
                }
                var retValue = parentDatabase.SecurityPolicies;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/SecurityPolicy" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<SecurityPolicy>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<SecurityPolicy>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlDatabaseCredentialQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseScopedCredential) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.DatabaseScopedCredentials.Refresh();
                }
                var retValue = parentDatabase.DatabaseScopedCredentials;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/DatabaseScopedCredential" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<DatabaseScopedCredential>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<DatabaseScopedCredential>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlRoleQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Roles.Refresh();
                }
                var retValue = parentDatabase.Roles;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/DatabaseRole" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<DatabaseRole>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<DatabaseRole>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlApplicationRoleQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ApplicationRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.ApplicationRoles.Refresh();
                }
                var retValue = parentDatabase.ApplicationRoles;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/ApplicationRole" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ApplicationRole>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ApplicationRole>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlColumnMasterKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ColumnMasterKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.ColumnMasterKeys.Refresh();
                }
                var retValue = parentDatabase.ColumnMasterKeys;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/ColumnMasterKey" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ColumnMasterKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ColumnMasterKey>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlColumnEncryptionKeyQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ColumnEncryptionKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.ColumnEncryptionKeys.Refresh();
                }
                var retValue = parentDatabase.ColumnEncryptionKeys;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/ColumnEncryptionKey" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ColumnEncryptionKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ColumnEncryptionKey>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServiceBrokerQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceBroker) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.ServiceBroker.Refresh();
                }
                var retValue = parentDatabase.ServiceBroker;
                if (retValue != null)
                {
                    return new SqlSmoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlServiceQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(BrokerService) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServiceBroker.Services.Refresh();
                }
                var retValue = parentServiceBroker.Services;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServiceBroker.Urn.ToString()}/BrokerService" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<BrokerService>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<BrokerService>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlContractQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceContract) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServiceBroker.ServiceContracts.Refresh();
                }
                var retValue = parentServiceBroker.ServiceContracts;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServiceBroker.Urn.ToString()}/ServiceContract" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ServiceContract>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ServiceContract>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlQueueQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceQueue) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServiceBroker.Queues.Refresh();
                }
                var retValue = parentServiceBroker.Queues;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServiceBroker.Urn.ToString()}/ServiceQueue" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ServiceQueue>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ServiceQueue>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlRemoteServiceBindingQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(RemoteServiceBinding) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServiceBroker.RemoteServiceBindings.Refresh();
                }
                var retValue = parentServiceBroker.RemoteServiceBindings;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServiceBroker.Urn.ToString()}/RemoteServiceBinding" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<RemoteServiceBinding>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<RemoteServiceBinding>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlBrokerPriorityQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(BrokerPriority) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServiceBroker.Priorities.Refresh();
                }
                var retValue = parentServiceBroker.Priorities;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServiceBroker.Urn.ToString()}/BrokerPriority" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<BrokerPriority>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<BrokerPriority>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlMessageTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(MessageType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentServiceBroker.MessageTypes.Refresh();
                }
                var retValue = parentServiceBroker.MessageTypes;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentServiceBroker.Urn.ToString()}/MessageType" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<MessageType>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<MessageType>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlExternalDataSourceQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExternalDataSource) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.ExternalDataSources.Refresh();
                }
                var retValue = parentDatabase.ExternalDataSources;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/ExternalDataSource" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ExternalDataSource>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ExternalDataSource>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlExternalFileFormatQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExternalFileFormat) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.ExternalFileFormats.Refresh();
                }
                var retValue = parentDatabase.ExternalFileFormats;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/ExternalFileFormat" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ExternalFileFormat>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ExternalFileFormat>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlProcedureQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(StoredProcedure) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.StoredProcedures.Refresh();
                }
                var retValue = parentDatabase.StoredProcedures;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/StoredProcedure" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<StoredProcedure>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<StoredProcedure>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlExtendedStoredProcedureQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExtendedStoredProcedure) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.ExtendedStoredProcedures.Refresh();
                }
                var retValue = parentDatabase.ExtendedStoredProcedures;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Urn.ToString()}/ExtendedStoredProcedure" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<ExtendedStoredProcedure>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<ExtendedStoredProcedure>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlSubroutineParameterQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Parameter) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            StoredProcedure parentStoredProcedure = context.Parent as StoredProcedure;
            if (parentStoredProcedure != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentStoredProcedure.Parameters.Refresh();
                }
                var retValue = parentStoredProcedure.Parameters;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentStoredProcedure.Urn.ToString()}/Parameter" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Parameter>(retValue).Where(c => PassesFinalFilters(parentStoredProcedure, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Parameter>(retValue);
                    }
                }
            }
            UserDefinedAggregate parentUserDefinedAggregate = context.Parent as UserDefinedAggregate;
            if (parentUserDefinedAggregate != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentUserDefinedAggregate.Parameters.Refresh();
                }
                var retValue = parentUserDefinedAggregate.Parameters;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentUserDefinedAggregate.Urn.ToString()}/Parameter" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Parameter>(retValue).Where(c => PassesFinalFilters(parentUserDefinedAggregate, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Parameter>(retValue);
                    }
                }
            }
            UserDefinedFunction parentUserDefinedFunction = context.Parent as UserDefinedFunction;
            if (parentUserDefinedFunction != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentUserDefinedFunction.Parameters.Refresh();
                }
                var retValue = parentUserDefinedFunction.Parameters;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentUserDefinedFunction.Urn.ToString()}/Parameter" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<Parameter>(retValue).Where(c => PassesFinalFilters(parentUserDefinedFunction, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<Parameter>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlPartitionFunctionParameterQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionFunctionParameter) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            PartitionFunction parentPartitionFunction = context.Parent as PartitionFunction;
            if (parentPartitionFunction != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentPartitionFunction.PartitionFunctionParameters.Refresh();
                }
                var retValue = parentPartitionFunction.PartitionFunctionParameters;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentPartitionFunction.Urn.ToString()}/PartitionFunctionParameter" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<PartitionFunctionParameter>(retValue).Where(c => PassesFinalFilters(parentPartitionFunction, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<PartitionFunctionParameter>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }

    [Export(typeof(SmoQuerier))]
    internal partial class SqlBuiltInTypeQuerier: SmoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SystemDataType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlSmoObject> Query(SmoQueryContext context, string filter, bool refresh)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                bool hasFilter = !string.IsNullOrEmpty(filter);
                if (refresh)
                {
                    parentDatabase.Parent.SystemDataTypes.Refresh();
                }
                var retValue = parentDatabase.Parent.SystemDataTypes;
                if (retValue != null)
                {
                    HashSet<string> urns = null;
                    if (hasFilter)
                    {
                        string urn = $"{parentDatabase.Parent.Urn.ToString()}/SystemDataType" + filter;
                        Enumerator en = new Enumerator();
                        Request request = new Request(new Urn(urn));
                        ServerConnection serverConnection = new ServerConnection(context.Server.ConnectionContext.SqlConnectionObject);
                        EnumResult result = en.Process(serverConnection, request);
                        urns = GetUrns(result);
                    }
                    if (hasFilter && urns != null)
                    {
                        return new SmoCollectionWrapper<SystemDataType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c) && urns.Contains(c.Urn));
                    }
                    else
                    {
                        return new SmoCollectionWrapper<SystemDataType>(retValue);
                    }
                }
            }
            return Enumerable.Empty<SqlSmoObject>();
        }
    }
}

