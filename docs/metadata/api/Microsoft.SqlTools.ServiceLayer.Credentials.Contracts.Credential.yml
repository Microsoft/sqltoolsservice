### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  commentId: T:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  id: Credential
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  children:
  - Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor
  - Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor(System.String)
  - Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor(System.String,System.String)
  - Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
  - Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
  - Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  - Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  langs:
  - csharp
  - vb
  name: Credential
  nameWithType: Credential
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  type: Class
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Credential
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 15
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nA Credential containing information needed to log into a resource. This is primarily \ndefined as a unique <xref href=\"Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId\" data-throw-if-not-resolved=\"false\"></xref> with an associated <xref href=\"Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password\" data-throw-if-not-resolved=\"false\"></xref>\nthat's linked to it. \n"
  example: []
  syntax:
    content: public class Credential
    content.vb: Public Class Credential
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
  commentId: P:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
  id: CredentialId
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  langs:
  - csharp
  - vb
  name: CredentialId
  nameWithType: Credential.CredentialId
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: CredentialId
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 20
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nA unique ID to identify the credential being saved. \n"
  example: []
  syntax:
    content: public string CredentialId { get; set; }
    content.vb: Public Property CredentialId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
  commentId: P:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
  id: Password
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: Credential.Password
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Password
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 25
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nThe Password stored for this credential. \n"
  example: []
  syntax:
    content: public string Password { get; set; }
    content.vb: Public Property Password As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor
  commentId: M:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor
  id: '#ctor'
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  langs:
  - csharp
  - vb
  name: Credential()
  nameWithType: Credential.Credential()
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Credential()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: .ctor
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 30
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nDefault Constructor\n"
  example: []
  syntax:
    content: public Credential()
    content.vb: Public Sub New
  overload: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor(System.String)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  langs:
  - csharp
  - vb
  name: Credential(String)
  nameWithType: Credential.Credential(String)
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Credential(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: .ctor
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 38
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nConstructor used when only <span class=\"paramref\">credentialId</span> is known\n"
  example: []
  syntax:
    content: public Credential(string credentialId)
    content.vb: Public Sub New(credentialId As String)
    parameters:
    - id: credentialId
      type: System.String
      description: <xref href="Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId" data-throw-if-not-resolved="false"></xref>
  overload: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor(System.String,System.String)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  langs:
  - csharp
  - vb
  name: Credential(String, String)
  nameWithType: Credential.Credential(String, String)
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Credential(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: .ctor
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 49
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public Credential(string credentialId, string password)
    content.vb: Public Sub New(credentialId As String, password As String)
    parameters:
    - id: credentialId
      type: System.String
      description: <xref href="Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId" data-throw-if-not-resolved="false"></xref>
    - id: password
      type: System.String
      description: <xref href="Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password" data-throw-if-not-resolved="false"></xref>
  overload: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  id: ValidateForLookup(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  langs:
  - csharp
  - vb
  name: ValidateForLookup(Credential)
  nameWithType: Credential.ValidateForLookup(Credential)
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ValidateForLookup
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 67
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nValidates the credential has all the properties needed to look up the password\n"
  example: []
  syntax:
    content: public static void ValidateForLookup(Credential credential)
    content.vb: Public Shared Sub ValidateForLookup(credential As Credential)
    parameters:
    - id: credential
      type: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  overload: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  id: ValidateForSave(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  langs:
  - csharp
  - vb
  name: ValidateForSave(Credential)
  nameWithType: Credential.ValidateForSave(Credential)
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave(Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ValidateForSave
    path: ../src/Microsoft.SqlTools.ServiceLayer/Credentials/Contracts/Credential.cs
    startLine: 77
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  summary: "\nValidates the credential has all the properties needed to save a password\n"
  example: []
  syntax:
    content: public static void ValidateForSave(Credential credential)
    content.vb: Public Shared Sub ValidateForSave(credential As Credential)
    parameters:
    - id: credential
      type: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  overload: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
  commentId: P:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
  commentId: P:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  commentId: N:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  nameWithType: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
  isExternal: false
  name: CredentialId
  nameWithType: Credential.CredentialId
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.CredentialId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
  isExternal: false
  name: Password
  nameWithType: Credential.Password
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Password
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.#ctor
  isExternal: false
  name: Credential
  nameWithType: Credential.Credential
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.Credential
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup
  isExternal: false
  name: ValidateForLookup
  nameWithType: Credential.ValidateForLookup
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForLookup
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  commentId: T:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
  parent: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts
  isExternal: false
  name: Credential
  nameWithType: Credential
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential
- uid: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave
  isExternal: false
  name: ValidateForSave
  nameWithType: Credential.ValidateForSave
  fullName: Microsoft.SqlTools.ServiceLayer.Credentials.Contracts.Credential.ValidateForSave
