### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1
  commentId: T:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1
  id: InteractionMetrics`1
  parent: Microsoft.SqlTools.ServiceLayer
  children:
  - Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.#ctor(System.Int32[])
  - Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Metrics
  - Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Quantile
  - Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.UpdateMetrics(System.Double,`0,System.Func{System.String,`0,`0})
  langs:
  - csharp
  - vb
  name: InteractionMetrics<T>
  nameWithType: InteractionMetrics<T>
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: InteractionMetrics
    path: ../src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
    startLine: 17
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer
  summary: "\nA class to calculate the value for the metrics using the given bucket\n"
  example: []
  syntax:
    content: public class InteractionMetrics<T>
    content.vb: Public Class InteractionMetrics(Of T)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: InteractionMetrics(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.SqlTools.ServiceLayer.InteractionMetrics(Of T)
  name.vb: InteractionMetrics(Of T)
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.#ctor(System.Int32[])
  commentId: M:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.#ctor(System.Int32[])
  id: '#ctor(System.Int32[])'
  parent: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1
  langs:
  - csharp
  - vb
  name: InteractionMetrics(Int32[])
  nameWithType: InteractionMetrics<T>.InteractionMetrics(Int32[])
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics<T>.InteractionMetrics(System.Int32[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: .ctor
    path: ../src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
    startLine: 22
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer
  summary: "\nCreates new instance given a bucket of metrics\n"
  example: []
  syntax:
    content: public InteractionMetrics(int[] metrics)
    content.vb: Public Sub New(metrics As Integer())
    parameters:
    - id: metrics
      type: System.Int32[]
  overload: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.#ctor*
  nameWithType.vb: InteractionMetrics(Of T).InteractionMetrics(Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.SqlTools.ServiceLayer.InteractionMetrics(Of T).InteractionMetrics(System.Int32())
  name.vb: InteractionMetrics(Int32())
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Metrics
  commentId: P:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Metrics
  id: Metrics
  parent: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1
  langs:
  - csharp
  - vb
  name: Metrics
  nameWithType: InteractionMetrics<T>.Metrics
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics<T>.Metrics
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Metrics
    path: ../src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
    startLine: 45
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer
  summary: "\nThe metrics bucket\n"
  example: []
  syntax:
    content: public int[] Metrics { get; }
    content.vb: Public ReadOnly Property Metrics As Integer()
    parameters: []
    return:
      type: System.Int32[]
  overload: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Metrics*
  nameWithType.vb: InteractionMetrics(Of T).Metrics
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.SqlTools.ServiceLayer.InteractionMetrics(Of T).Metrics
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.UpdateMetrics(System.Double,`0,System.Func{System.String,`0,`0})
  commentId: M:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.UpdateMetrics(System.Double,`0,System.Func{System.String,`0,`0})
  id: UpdateMetrics(System.Double,`0,System.Func{System.String,`0,`0})
  parent: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1
  langs:
  - csharp
  - vb
  name: UpdateMetrics(Double, T, Func<String, T, T>)
  nameWithType: InteractionMetrics<T>.UpdateMetrics(Double, T, Func<String, T, T>)
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics<T>.UpdateMetrics(System.Double, T, System.Func<System.String, T, T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: UpdateMetrics
    path: ../src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
    startLine: 70
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer
  summary: "\nUpdate metric value given new number\n"
  example: []
  syntax:
    content: public void UpdateMetrics(double duration, T newValue, Func<string, T, T> updateValueFactory)
    content.vb: Public Sub UpdateMetrics(duration As Double, newValue As T, updateValueFactory As Func(Of String, T, T))
    parameters:
    - id: duration
      type: System.Double
    - id: newValue
      type: '{T}'
    - id: updateValueFactory
      type: System.Func{System.String,{T},{T}}
  overload: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.UpdateMetrics*
  nameWithType.vb: InteractionMetrics(Of T).UpdateMetrics(Double, T, Func(Of String, T, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.SqlTools.ServiceLayer.InteractionMetrics(Of T).UpdateMetrics(System.Double, T, System.Func(Of System.String, T, T))
  name.vb: UpdateMetrics(Double, T, Func(Of String, T, T))
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Quantile
  commentId: P:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Quantile
  id: Quantile
  parent: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1
  langs:
  - csharp
  - vb
  name: Quantile
  nameWithType: InteractionMetrics<T>.Quantile
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics<T>.Quantile
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Quantile
    path: ../src/Microsoft.SqlTools.ServiceLayer/LanguageServices/InteractionMetrics.cs
    startLine: 88
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer
  summary: "\nReturns the quantile\n"
  example: []
  syntax:
    content: public Dictionary<string, T> Quantile { get; }
    content.vb: Public ReadOnly Property Quantile As Dictionary(Of String, T)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,{T}}
  overload: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Quantile*
  nameWithType.vb: InteractionMetrics(Of T).Quantile
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.SqlTools.ServiceLayer.InteractionMetrics(Of T).Quantile
references:
- uid: Microsoft.SqlTools.ServiceLayer
  commentId: N:Microsoft.SqlTools.ServiceLayer
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer
  nameWithType: Microsoft.SqlTools.ServiceLayer
  fullName: Microsoft.SqlTools.ServiceLayer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.#ctor*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.#ctor
  isExternal: false
  name: InteractionMetrics
  nameWithType: InteractionMetrics.InteractionMetrics
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics.InteractionMetrics
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Metrics*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Metrics
  isExternal: false
  name: Metrics
  nameWithType: InteractionMetrics<T>.Metrics
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics<T>.Metrics
  nameWithType.vb: InteractionMetrics(Of T).Metrics
  fullname.vb: Microsoft.SqlTools.ServiceLayer.InteractionMetrics(Of T).Metrics
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.UpdateMetrics*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.UpdateMetrics
  isExternal: false
  name: UpdateMetrics
  nameWithType: InteractionMetrics.UpdateMetrics
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics.UpdateMetrics
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{System.String,{T},{T}}
  commentId: T:System.Func{System.String,`0,`0}
  parent: System
  definition: System.Func`3
  name: Func<String, T, T>
  nameWithType: Func<String, T, T>
  fullName: System.Func<System.String, T, T>
  nameWithType.vb: Func(Of String, T, T)
  fullname.vb: System.Func(Of System.String, T, T)
  name.vb: Func(Of String, T, T)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Quantile*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Quantile
  isExternal: false
  name: Quantile
  nameWithType: InteractionMetrics<T>.Quantile
  fullName: Microsoft.SqlTools.ServiceLayer.InteractionMetrics<T>.Quantile
  nameWithType.vb: InteractionMetrics(Of T).Quantile
  fullname.vb: Microsoft.SqlTools.ServiceLayer.InteractionMetrics(Of T).Quantile
- uid: System.Collections.Generic.Dictionary{System.String,{T}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, T>
  nameWithType: Dictionary<String, T>
  fullName: System.Collections.Generic.Dictionary<System.String, T>
  nameWithType.vb: Dictionary(Of String, T)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, T)
  name.vb: Dictionary(Of String, T)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
