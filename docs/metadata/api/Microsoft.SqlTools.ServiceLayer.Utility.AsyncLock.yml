### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock
  commentId: T:Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock
  id: AsyncLock
  parent: Microsoft.SqlTools.ServiceLayer.Utility
  children:
  - Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.#ctor
  - Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync
  - Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: AsyncLock
  nameWithType: AsyncLock
  fullName: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock
  type: Class
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: AsyncLock
    path: ../src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
    startLine: 16
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Utility
  summary: "\nProvides a simple wrapper over a SemaphoreSlim to allow\nsynchronization locking inside of async calls.  Cannot be\nused recursively.\n"
  example: []
  syntax:
    content: public class AsyncLock
    content.vb: Public Class AsyncLock
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.#ctor
  commentId: M:Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.#ctor
  id: '#ctor'
  parent: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock
  langs:
  - csharp
  - vb
  name: AsyncLock()
  nameWithType: AsyncLock.AsyncLock()
  fullName: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.AsyncLock()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: .ctor
    path: ../src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
    startLine: 30
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Utility
  summary: "\nInitializes a new instance of the AsyncLock class.\n"
  example: []
  syntax:
    content: public AsyncLock()
    content.vb: Public Sub New
  overload: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync
  commentId: M:Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync
  id: LockAsync
  parent: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock
  langs:
  - csharp
  - vb
  name: LockAsync()
  nameWithType: AsyncLock.LockAsync()
  fullName: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: LockAsync
    path: ../src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
    startLine: 45
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Utility
  summary: "\nLocks\n"
  example: []
  syntax:
    content: public Task<IDisposable> LockAsync()
    content.vb: Public Function LockAsync As Task(Of IDisposable)
    return:
      type: System.Threading.Tasks.Task{System.IDisposable}
      description: A task which has an IDisposable
  overload: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync(System.Threading.CancellationToken)
  id: LockAsync(System.Threading.CancellationToken)
  parent: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock
  langs:
  - csharp
  - vb
  name: LockAsync(CancellationToken)
  nameWithType: AsyncLock.LockAsync(CancellationToken)
  fullName: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: LockAsync
    path: ../src/Microsoft.SqlTools.ServiceLayer/Utility/AsyncLock.cs
    startLine: 59
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Utility
  summary: "\nObtains or waits for a lock which can be used to synchronize\naccess to a resource.  The wait may be cancelled with the\ngiven CancellationToken.\n"
  example: []
  syntax:
    content: public Task<IDisposable> LockAsync(CancellationToken cancellationToken)
    content.vb: Public Function LockAsync(cancellationToken As CancellationToken) As Task(Of IDisposable)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA CancellationToken which can be used to cancel the lock.\n"
    return:
      type: System.Threading.Tasks.Task{System.IDisposable}
      description: ''
  overload: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.SqlTools.ServiceLayer.Utility
  commentId: N:Microsoft.SqlTools.ServiceLayer.Utility
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.Utility
  nameWithType: Microsoft.SqlTools.ServiceLayer.Utility
  fullName: Microsoft.SqlTools.ServiceLayer.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.#ctor*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.#ctor
  isExternal: false
  name: AsyncLock
  nameWithType: AsyncLock.AsyncLock
  fullName: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.AsyncLock
- uid: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync
  isExternal: false
  name: LockAsync
  nameWithType: AsyncLock.LockAsync
  fullName: Microsoft.SqlTools.ServiceLayer.Utility.AsyncLock.LockAsync
- uid: System.Threading.Tasks.Task{System.IDisposable}
  commentId: T:System.Threading.Tasks.Task{System.IDisposable}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDisposable>
  nameWithType: Task<IDisposable>
  fullName: System.Threading.Tasks.Task<System.IDisposable>
  nameWithType.vb: Task(Of IDisposable)
  fullname.vb: System.Threading.Tasks.Task(Of System.IDisposable)
  name.vb: Task(Of IDisposable)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
