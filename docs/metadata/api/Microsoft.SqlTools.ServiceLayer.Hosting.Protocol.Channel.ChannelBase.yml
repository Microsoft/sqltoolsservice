### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  id: ChannelBase
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  children:
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer)
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType)
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection
  langs:
  - csharp
  - vb
  name: ChannelBase
  nameWithType: ChannelBase
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  type: Class
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ChannelBase
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 14
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nDefines a base implementation for servers and their clients over a\nsingle kind of communication channel.\n"
  example: []
  syntax:
    content: public abstract class ChannelBase
    content.vb: Public MustInherit Class ChannelBase
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.StdioClientChannel
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.StdioServerChannel
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected
  commentId: P:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected
  id: IsConnected
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: ChannelBase.IsConnected
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: IsConnected
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 19
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nGets a boolean that is true if the channel is connected or false if not.\n"
  example: []
  syntax:
    content: public bool IsConnected { get; protected set; }
    content.vb: Public Property IsConnected As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader
  commentId: P:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader
  id: MessageReader
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: MessageReader
  nameWithType: ChannelBase.MessageReader
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: MessageReader
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 24
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nGets the MessageReader for reading messages from the channel.\n"
  example: []
  syntax:
    content: public MessageReader MessageReader { get; protected set; }
    content.vb: Public Property MessageReader As MessageReader
    parameters: []
    return:
      type: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageReader
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter
  commentId: P:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter
  id: MessageWriter
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: MessageWriter
  nameWithType: ChannelBase.MessageWriter
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: MessageWriter
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 29
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nGets the MessageWriter for writing messages to the channel.\n"
  example: []
  syntax:
    content: public MessageWriter MessageWriter { get; protected set; }
    content.vb: Public Property MessageWriter As MessageWriter
    parameters: []
    return:
      type: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageWriter
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType)
  id: Start(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType)
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: Start(MessageProtocolType)
  nameWithType: ChannelBase.Start(MessageProtocolType)
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Start
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 35
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nStarts the channel and initializes the MessageDispatcher.\n"
  example: []
  syntax:
    content: public void Start(MessageProtocolType messageProtocolType)
    content.vb: Public Sub Start(messageProtocolType As MessageProtocolType)
    parameters:
    - id: messageProtocolType
      type: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType
      description: The type of message protocol used by the channel.
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection
  commentId: M:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection
  id: WaitForConnection
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: WaitForConnection()
  nameWithType: ChannelBase.WaitForConnection()
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection()
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: WaitForConnection
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 56
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nReturns a Task that allows the consumer of the ChannelBase\nimplementation to wait until a connection has been made to\nthe opposite endpoint whether it's a client or server.\n"
  example: []
  syntax:
    content: public abstract Task WaitForConnection()
    content.vb: Public MustOverride Function WaitForConnection As Task
    return:
      type: System.Threading.Tasks.Task
      description: A Task to be awaited until a connection is made.
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop
  commentId: M:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop
  id: Stop
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: ChannelBase.Stop()
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop()
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Stop
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 61
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nStops the channel.\n"
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer)
  id: Initialize(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer)
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: Initialize(IMessageSerializer)
  nameWithType: ChannelBase.Initialize(IMessageSerializer)
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Initialize
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 72
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nA method to be implemented by subclasses to handle the\nactual initialization of the channel and the creation and\nassignment of the MessageReader and MessageWriter properties.\n"
  example: []
  syntax:
    content: protected abstract void Initialize(IMessageSerializer messageSerializer)
    content.vb: Protected MustOverride Sub Initialize(messageSerializer As IMessageSerializer)
    parameters:
    - id: messageSerializer
      type: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer
      description: The IMessageSerializer to use for message serialization.
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown
  commentId: M:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown
  id: Shutdown
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase
  langs:
  - csharp
  - vb
  name: Shutdown()
  nameWithType: ChannelBase.Shutdown()
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown()
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Shutdown
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/Channel/ChannelBase.cs
    startLine: 78
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  summary: "\nA method to be implemented by subclasses to handle shutdown\nof the channel once Stop is called.\n"
  example: []
  syntax:
    content: protected abstract void Shutdown()
    content.vb: Protected MustOverride Sub Shutdown
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  commentId: N:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  nameWithType: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected
  isExternal: false
  name: IsConnected
  nameWithType: ChannelBase.IsConnected
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.IsConnected
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader
  isExternal: false
  name: MessageReader
  nameWithType: ChannelBase.MessageReader
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageReader
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageReader
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageReader
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  isExternal: false
  name: MessageReader
  nameWithType: MessageReader
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageReader
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  commentId: N:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  nameWithType: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter
  isExternal: false
  name: MessageWriter
  nameWithType: ChannelBase.MessageWriter
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.MessageWriter
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageWriter
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageWriter
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  isExternal: false
  name: MessageWriter
  nameWithType: MessageWriter
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageWriter
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start
  isExternal: false
  name: Start
  nameWithType: ChannelBase.Start
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Start
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  isExternal: false
  name: MessageProtocolType
  nameWithType: MessageProtocolType
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.MessageProtocolType
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection
  isExternal: false
  name: WaitForConnection
  nameWithType: ChannelBase.WaitForConnection
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.WaitForConnection
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop
  isExternal: false
  name: Stop
  nameWithType: ChannelBase.Stop
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Stop
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize
  isExternal: false
  name: Initialize
  nameWithType: ChannelBase.Initialize
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Initialize
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers
  isExternal: false
  name: IMessageSerializer
  nameWithType: IMessageSerializer
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers.IMessageSerializer
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers
  commentId: N:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers
  nameWithType: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Serializers
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown
  isExternal: false
  name: Shutdown
  nameWithType: ChannelBase.Shutdown
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Channel.ChannelBase.Shutdown
