### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  commentId: T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  id: Batch
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution
  children:
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchCompletion
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchStart
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose(System.Boolean)
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset(System.Int32,System.Int32,System.Int32)
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSetCompletion
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries
  - Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary
  langs:
  - csharp
  - vb
  name: Batch
  nameWithType: Batch
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  type: Class
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Batch
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 23
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nThis class represents a batch within a query\n"
  example: []
  syntax:
    content: 'public class Batch : IDisposable'
    content.vb: >-
      Public Class Batch
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchCompletion
  commentId: E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchCompletion
  id: BatchCompletion
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: BatchCompletion
  nameWithType: Batch.BatchCompletion
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchCompletion
  type: Event
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: BatchCompletion
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 88
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nEvent that will be called when the batch has completed execution\n"
  example: []
  syntax:
    content: public event Batch.BatchAsyncEventHandler BatchCompletion
    content.vb: Public Event BatchCompletion As Batch.BatchAsyncEventHandler
    return:
      type: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchAsyncEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchStart
  commentId: E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchStart
  id: BatchStart
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: BatchStart
  nameWithType: Batch.BatchStart
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchStart
  type: Event
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: BatchStart
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 93
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nEvent to call when the batch has started execution\n"
  example: []
  syntax:
    content: public event Batch.BatchAsyncEventHandler BatchStart
    content.vb: Public Event BatchStart As Batch.BatchAsyncEventHandler
    return:
      type: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchAsyncEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSetCompletion
  commentId: E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSetCompletion
  id: ResultSetCompletion
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: ResultSetCompletion
  nameWithType: Batch.ResultSetCompletion
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSetCompletion
  type: Event
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ResultSetCompletion
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 99
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nEvent that will be called when the resultset has completed execution. It will not be\ncalled from the Batch but from the ResultSet instance\n"
  example: []
  syntax:
    content: public event ResultSet.ResultSetAsyncEventHandler ResultSetCompletion
    content.vb: Public Event ResultSetCompletion As ResultSet.ResultSetAsyncEventHandler
    return:
      type: Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultSetAsyncEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText
  id: BatchText
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: BatchText
  nameWithType: Batch.BatchText
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: BatchText
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 108
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nThe text of batch that will be executed\n"
  example: []
  syntax:
    content: public string BatchText { get; set; }
    content.vb: Public Property BatchText As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp
  id: ExecutionEndTimeStamp
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: ExecutionEndTimeStamp
  nameWithType: Batch.ExecutionEndTimeStamp
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ExecutionEndTimeStamp
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 114
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nLocalized timestamp for when the execution completed.\nStored in UTC ISO 8601 format; should be localized before displaying to any user\n"
  example: []
  syntax:
    content: public string ExecutionEndTimeStamp { get; }
    content.vb: Public ReadOnly Property ExecutionEndTimeStamp As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime
  id: ExecutionElapsedTime
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: ExecutionElapsedTime
  nameWithType: Batch.ExecutionElapsedTime
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ExecutionElapsedTime
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 119
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nLocalized timestamp for how long it took for the execution to complete\n"
  example: []
  syntax:
    content: public string ExecutionElapsedTime { get; }
    content.vb: Public ReadOnly Property ExecutionElapsedTime As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp
  id: ExecutionStartTimeStamp
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: ExecutionStartTimeStamp
  nameWithType: Batch.ExecutionStartTimeStamp
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ExecutionStartTimeStamp
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 132
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nLocalized timestamp for when the execution began.\nStored in UTC ISO 8601 format; should be localized before displaying to any user\n"
  example: []
  syntax:
    content: public string ExecutionStartTimeStamp { get; }
    content.vb: Public ReadOnly Property ExecutionStartTimeStamp As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError
  id: HasError
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: HasError
  nameWithType: Batch.HasError
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: HasError
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 137
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nWhether or not this batch has an error\n"
  example: []
  syntax:
    content: public bool HasError { get; set; }
    content.vb: Public Property HasError As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted
  id: HasExecuted
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: HasExecuted
  nameWithType: Batch.HasExecuted
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: HasExecuted
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 142
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nWhether or not this batch has been executed, regardless of success or failure \n"
  example: []
  syntax:
    content: public bool HasExecuted { get; set; }
    content.vb: Public Property HasExecuted As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id
  id: Id
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Batch.Id
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Id
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 147
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nOrdinal of the batch in the query\n"
  example: []
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages
  id: ResultMessages
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: ResultMessages
  nameWithType: Batch.ResultMessages
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ResultMessages
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 152
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nMessages that have come back from the server\n"
  example: []
  syntax:
    content: public IEnumerable<ResultMessage> ResultMessages { get; }
    content.vb: Public ReadOnly Property ResultMessages As IEnumerable(Of ResultMessage)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage}
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets
  id: ResultSets
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: ResultSets
  nameWithType: Batch.ResultSets
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ResultSets
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 160
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nThe result sets of the batch execution\n"
  example: []
  syntax:
    content: public IList<ResultSet> ResultSets { get; }
    content.vb: Public ReadOnly Property ResultSets As IList(Of ResultSet)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet}
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries
  id: ResultSummaries
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: ResultSummaries
  nameWithType: Batch.ResultSummaries
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: ResultSummaries
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 168
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nProperty for generating a set result set summaries from the result sets\n"
  example: []
  syntax:
    content: public ResultSetSummary[] ResultSummaries { get; }
    content.vb: Public ReadOnly Property ResultSummaries As ResultSetSummary()
    parameters: []
    return:
      type: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary[]
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary
  commentId: P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary
  id: Summary
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: Summary
  nameWithType: Batch.Summary
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary
  type: Property
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Summary
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 182
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nCreates a <xref href=\"Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary\" data-throw-if-not-resolved=\"false\"></xref> based on the batch instance\n"
  example: []
  syntax:
    content: public BatchSummary Summary { get; }
    content.vb: Public ReadOnly Property Summary As BatchSummary
    parameters: []
    return:
      type: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  commentId: M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  id: Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken)
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: Execute(DbConnection, CancellationToken)
  nameWithType: Batch.Execute(DbConnection, CancellationToken)
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute(System.Data.Common.DbConnection, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Execute
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 222
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nExecutes this batch and captures any server messages that are returned.\n"
  example: []
  syntax:
    content: public Task Execute(DbConnection conn, CancellationToken cancellationToken)
    content.vb: Public Function Execute(conn As DbConnection, cancellationToken As CancellationToken) As Task
    parameters:
    - id: conn
      type: System.Data.Common.DbConnection
      description: The connection to use to execute the batch
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token for cancelling the execution
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset(System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset(System.Int32,System.Int32,System.Int32)
  id: GetSubset(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: GetSubset(Int32, Int32, Int32)
  nameWithType: Batch.GetSubset(Int32, Int32, Int32)
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: GetSubset
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 351
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  summary: "\nGenerates a subset of the rows from a result set of the batch\n"
  example: []
  syntax:
    content: public Task<ResultSetSubset> GetSubset(int resultSetIndex, int startRow, int rowCount)
    content.vb: Public Function GetSubset(resultSetIndex As Integer, startRow As Integer, rowCount As Integer) As Task(Of ResultSetSubset)
    parameters:
    - id: resultSetIndex
      type: System.Int32
      description: The index for selecting the result set
    - id: startRow
      type: System.Int32
      description: The starting row of the results
    - id: rowCount
      type: System.Int32
      description: How many rows to retrieve
    return:
      type: System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset}
      description: A subset of results
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose
  commentId: M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose
  id: Dispose
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Batch.Dispose()
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Dispose
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 452
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose(System.Boolean)
  commentId: M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: Batch.Dispose(Boolean)
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: Dispose
    path: ../src/Microsoft.SqlTools.ServiceLayer/QueryExecution/Batch.cs
    startLine: 458
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.QueryExecution
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overload: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution
  commentId: N:Microsoft.SqlTools.ServiceLayer.QueryExecution
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.QueryExecution
  nameWithType: Microsoft.SqlTools.ServiceLayer.QueryExecution
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchAsyncEventHandler
  commentId: T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchAsyncEventHandler
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution
  isExternal: false
  name: Batch.BatchAsyncEventHandler
  nameWithType: Batch.BatchAsyncEventHandler
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchAsyncEventHandler
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultSetAsyncEventHandler
  commentId: T:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultSetAsyncEventHandler
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution
  isExternal: false
  name: ResultSet.ResultSetAsyncEventHandler
  nameWithType: ResultSet.ResultSetAsyncEventHandler
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultSetAsyncEventHandler
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText
  isExternal: false
  name: BatchText
  nameWithType: Batch.BatchText
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp
  isExternal: false
  name: ExecutionEndTimeStamp
  nameWithType: Batch.ExecutionEndTimeStamp
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime
  isExternal: false
  name: ExecutionElapsedTime
  nameWithType: Batch.ExecutionElapsedTime
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp
  isExternal: false
  name: ExecutionStartTimeStamp
  nameWithType: Batch.ExecutionStartTimeStamp
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError
  isExternal: false
  name: HasError
  nameWithType: Batch.HasError
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted
  isExternal: false
  name: HasExecuted
  nameWithType: Batch.HasExecuted
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id
  isExternal: false
  name: Id
  nameWithType: Batch.Id
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages
  isExternal: false
  name: ResultMessages
  nameWithType: Batch.ResultMessages
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultMessages
- uid: System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ResultMessage>
  nameWithType: IEnumerable<ResultMessage>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage>
  nameWithType.vb: IEnumerable(Of ResultMessage)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage)
  name.vb: IEnumerable(Of ResultMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage
    name: ResultMessage
    nameWithType: ResultMessage
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage
    name: ResultMessage
    nameWithType: ResultMessage
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets
  isExternal: false
  name: ResultSets
  nameWithType: Batch.ResultSets
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets
- uid: System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet}
  commentId: T:System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ResultSet>
  nameWithType: IList<ResultSet>
  fullName: System.Collections.Generic.IList<Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet>
  nameWithType.vb: IList(Of ResultSet)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet)
  name.vb: IList(Of ResultSet)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet
    name: ResultSet
    nameWithType: ResultSet
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet
    name: ResultSet
    nameWithType: ResultSet
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries
  isExternal: false
  name: ResultSummaries
  nameWithType: Batch.ResultSummaries
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary[]
  name: ResultSetSummary[]
  nameWithType: ResultSetSummary[]
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary[]
  nameWithType.vb: ResultSetSummary()
  fullname.vb: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary()
  name.vb: ResultSetSummary()
  spec.csharp:
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary
    name: ResultSetSummary
    nameWithType: ResultSetSummary
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary
    name: ResultSetSummary
    nameWithType: ResultSetSummary
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary
  commentId: T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary
  parent: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts
  isExternal: false
  name: BatchSummary
  nameWithType: BatchSummary
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary
  isExternal: false
  name: Summary
  nameWithType: Batch.Summary
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts
  commentId: N:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts
  nameWithType: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute
  isExternal: false
  name: Execute
  nameWithType: Batch.Execute
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute
- uid: System.Data.Common.DbConnection
  commentId: T:System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: true
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: false
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset
  isExternal: false
  name: GetSubset
  nameWithType: Batch.GetSubset
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset
- uid: System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset}
  commentId: T:System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResultSetSubset>
  nameWithType: Task<ResultSetSubset>
  fullName: System.Threading.Tasks.Task<Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset>
  nameWithType.vb: Task(Of ResultSetSubset)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset)
  name.vb: Task(Of ResultSetSubset)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset
    name: ResultSetSubset
    nameWithType: ResultSetSubset
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset
    name: ResultSetSubset
    nameWithType: ResultSetSubset
    fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose
  isExternal: false
  name: Dispose
  nameWithType: Batch.Dispose
  fullName: Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
