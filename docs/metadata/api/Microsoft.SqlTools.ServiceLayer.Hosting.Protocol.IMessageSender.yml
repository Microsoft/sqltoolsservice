### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender
  id: IMessageSender
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  children:
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent``1(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType{``0},``0)
  - Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest``2(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType{``0,``1},``0,System.Boolean)
  langs:
  - csharp
  - vb
  name: IMessageSender
  nameWithType: IMessageSender
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender
  type: Interface
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/IMessageSender.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: IMessageSender
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/IMessageSender.cs
    startLine: 10
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  syntax:
    content: public interface IMessageSender
    content.vb: Public Interface IMessageSender
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent``1(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType{``0},``0)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent``1(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType{``0},``0)
  id: SendEvent``1(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType{``0},``0)
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender
  langs:
  - csharp
  - vb
  name: SendEvent<TParams>(EventType<TParams>, TParams)
  nameWithType: IMessageSender.SendEvent<TParams>(EventType<TParams>, TParams)
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent<TParams>(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType<TParams>, TParams)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/IMessageSender.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: SendEvent
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/IMessageSender.cs
    startLine: 12
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  syntax:
    content: Task SendEvent<TParams>(EventType<TParams> eventType, TParams eventParams)
    content.vb: Function SendEvent(Of TParams)(eventType As EventType(Of TParams), eventParams As TParams) As Task
    parameters:
    - id: eventType
      type: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType{{TParams}}
    - id: eventParams
      type: '{TParams}'
    typeParameters:
    - id: TParams
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent*
  nameWithType.vb: IMessageSender.SendEvent(Of TParams)(EventType(Of TParams), TParams)
  fullName.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent(Of TParams)(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType(Of TParams), TParams)
  name.vb: SendEvent(Of TParams)(EventType(Of TParams), TParams)
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest``2(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType{``0,``1},``0,System.Boolean)
  commentId: M:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest``2(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType{``0,``1},``0,System.Boolean)
  id: SendRequest``2(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType{``0,``1},``0,System.Boolean)
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender
  langs:
  - csharp
  - vb
  name: SendRequest<TParams, TResult>(RequestType<TParams, TResult>, TParams, Boolean)
  nameWithType: IMessageSender.SendRequest<TParams, TResult>(RequestType<TParams, TResult>, TParams, Boolean)
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest<TParams, TResult>(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType<TParams, TResult>, TParams, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/IMessageSender.cs
      branch: master
      repo: https://kburtram:67c6623fc506400046096af249535f684d9ea40b@github.com/Microsoft/sqltoolsservice.git
    id: SendRequest
    path: ../src/Microsoft.SqlTools.ServiceLayer/Hosting/Protocol/IMessageSender.cs
    startLine: 16
  assemblies:
  - Microsoft.SqlTools.ServiceLayer
  namespace: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  syntax:
    content: Task<TResult> SendRequest<TParams, TResult>(RequestType<TParams, TResult> requestType, TParams requestParams, bool waitForResponse)
    content.vb: Function SendRequest(Of TParams, TResult)(requestType As RequestType(Of TParams, TResult), requestParams As TParams, waitForResponse As Boolean) As Task(Of TResult)
    parameters:
    - id: requestType
      type: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType{{TParams},{TResult}}
    - id: requestParams
      type: '{TParams}'
    - id: waitForResponse
      type: System.Boolean
    typeParameters:
    - id: TParams
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
  overload: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest*
  nameWithType.vb: IMessageSender.SendRequest(Of TParams, TResult)(RequestType(Of TParams, TResult), TParams, Boolean)
  fullName.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest(Of TParams, TResult)(Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType(Of TParams, TResult), TParams, System.Boolean)
  name.vb: SendRequest(Of TParams, TResult)(RequestType(Of TParams, TResult), TParams, Boolean)
references:
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  commentId: N:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  nameWithType: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent
  isExternal: false
  name: SendEvent<TParams>
  nameWithType: IMessageSender.SendEvent<TParams>
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent<TParams>
  nameWithType.vb: IMessageSender.SendEvent(Of TParams)
  fullname.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendEvent(Of TParams)
  name.vb: SendEvent(Of TParams)
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType{{TParams}}
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType{``0}
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  definition: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType`1
  name: EventType<TParams>
  nameWithType: EventType<TParams>
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType<TParams>
  nameWithType.vb: EventType(Of TParams)
  fullname.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType(Of TParams)
  name.vb: EventType(Of TParams)
  spec.csharp:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType`1
    name: EventType
    nameWithType: EventType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType
  - name: <
    nameWithType: <
    fullName: <
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType`1
    name: EventType
    nameWithType: EventType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TParams}'
  commentId: '!:TParams'
  definition: TParams
  name: TParams
  nameWithType: TParams
  fullName: TParams
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType`1
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType`1
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  isExternal: false
  name: EventType<TParams>
  nameWithType: EventType<TParams>
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType<TParams>
  nameWithType.vb: EventType(Of TParams)
  fullname.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType(Of TParams)
  name.vb: EventType(Of TParams)
  spec.csharp:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType`1
    name: EventType
    nameWithType: EventType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType
  - name: <
    nameWithType: <
    fullName: <
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType`1
    name: EventType
    nameWithType: EventType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.EventType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  commentId: N:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  isExternal: false
  name: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  nameWithType: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
- uid: TParams
  isExternal: false
  name: TParams
  nameWithType: TParams
  fullName: TParams
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest*
  commentId: Overload:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest
  isExternal: false
  name: SendRequest<TParams, TResult>
  nameWithType: IMessageSender.SendRequest<TParams, TResult>
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest<TParams, TResult>
  nameWithType.vb: IMessageSender.SendRequest(Of TParams, TResult)
  fullname.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.IMessageSender.SendRequest(Of TParams, TResult)
  name.vb: SendRequest(Of TParams, TResult)
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType{{TParams},{TResult}}
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType{``0,``1}
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  definition: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType`2
  name: RequestType<TParams, TResult>
  nameWithType: RequestType<TParams, TResult>
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType<TParams, TResult>
  nameWithType.vb: RequestType(Of TParams, TResult)
  fullname.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType(Of TParams, TResult)
  name.vb: RequestType(Of TParams, TResult)
  spec.csharp:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType`2
    name: RequestType
    nameWithType: RequestType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType
  - name: <
    nameWithType: <
    fullName: <
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType`2
    name: RequestType
    nameWithType: RequestType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType`2
  commentId: T:Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType`2
  parent: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts
  isExternal: false
  name: RequestType<TParams, TResult>
  nameWithType: RequestType<TParams, TResult>
  fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType<TParams, TResult>
  nameWithType.vb: RequestType(Of TParams, TResult)
  fullname.vb: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType(Of TParams, TResult)
  name.vb: RequestType(Of TParams, TResult)
  spec.csharp:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType`2
    name: RequestType
    nameWithType: RequestType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType
  - name: <
    nameWithType: <
    fullName: <
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType`2
    name: RequestType
    nameWithType: RequestType
    fullName: Microsoft.SqlTools.ServiceLayer.Hosting.Protocol.Contracts.RequestType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParams
    nameWithType: TParams
    fullName: TParams
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
